(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{479:function(e,t,o){"use strict";o.r(t);var a=o(2),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("What are the three categories of data types? How are they different?")]),e._v(" "),o("p",[e._v("Value type: A data type is a value type if it holds a data value within its own memory space. In basic terms it means to delcares a variable and gives it a value. Example: i = 100")]),e._v(" "),o("p",[e._v('Reference type:  A reference type doesn\'t store its value directly. It stores the address where the value is being stored.\nExample string s = "Hello Kaleb"')]),e._v(" "),o("p",[e._v("Pointer type: Pointer types do not inherit from object and no conversions exist between pointer types and object.")]),e._v(" "),o("p",[e._v("What are the Value-type data types? What differences do you notice from JavaScript?")]),e._v(" "),o("p",[e._v("bool, byte, char, decimal, double, enum, float, int, long, sbyte, short, struct, uint, ulong, and ushort.\nSome of the biggest differences I've seen is that you have to define what you're doing. Example string h = \"hellow world.")]),e._v(" "),o("p",[e._v("In your own words how do Reference types get stored in memory? How does this differ from Value types?")]),e._v(" "),o("p",[e._v("Value types stores it's value directly. It differs from reference in the way that the Reference will store the memory address instead of the variable value directly.")]),e._v(" "),o("p",[e._v("https://github.com/KalebMcElyea/rock-paper-scissors-C-")])])}),[],!1,null,null,null);t.default=r.exports}}]);